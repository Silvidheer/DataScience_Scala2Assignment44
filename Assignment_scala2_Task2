[acadgild@localhost ~]$ scala
Welcome to Scala version 2.11.7 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_161).
Type in expressions to have them evaluated.
Type :help for more information.

Create a calculator to work with rational numbers.
Requirements:
○ It should provide capability to add, subtract, divide and multiply rational
numbers
○ Create a method to compute GCD (this will come in handy during operations on rational)


class Rational(x: Int, y: Int) {
        private def gcd(a: Int, b: Int): Int = if (b == 0) a else gcd(b, a % b)
        def numer = x / gcd(x, y)
        def denom = y / gcd(x, y)
        def add(r: Rational) =
          new Rational(numer * r.denom + r.numer * denom, denom * r.denom)
        def mul(r: Rational) = 
          new Rational(r.numer * numer, r.denom * denom)
	def div(r: Rational) =
	  new Rational(numer * r.denom, denom * r.numer)
	def sub(r: Rational) =
	  new Rational(r.numer * denom - numer * r.denom, r.denom * denom)
        override def toString = numer + "/" + denom
      }

val x = new Rational(1, 3)
val y = new Rational(5, 7)
val z = new Rational(3, 2)
x.add(y).mul(z)


Add option to work with whole numbers which are also rational numbers i.e. (n/1)
- achieve the above using auxiliary constructors
- enable method overloading to enable each function to work with numbers and rational.

class Rational(x: Int, y: Int) {
        private def gcd(a: Int, b: Int): Int = if (b == 0) a else gcd(b, a % b)
        def numer = x / gcd(x, y)
        def denom = y / gcd(x, y)
        def add(r: Rational) =
          new Rational(numer * r.denom + r.numer * denom, denom * r.denom)
        def mul(r: Rational) = 
          new Rational(r.numer * numer, r.denom * denom)
	def div(r: Rational) =
	  new Rational(numer * r.denom, denom * r.numer)
	def sub(r: Rational) =
	  new Rational(r.numer * denom - numer * r.denom, r.denom * denom)
        override def toString = numer + "/" + denom

	def this(x: Int) = this(x, 1)
	def add(a: Int, b: Int) = a + b
	def sub(a: Int, b: Int) = a - b
	def mul(a: Int, b: Int) = a * b
	def div(a: Double, b: Double ) = a / b

      }

 
val x = new Rational(3)
val y = new Rational(5)
val z = new Rational(3)
x.add(y).mul(z)

scala> val x = new Rational(5)
x: Rational = 5/1

scala> val y = 10
y: Int = 10

scala> val z = 2
z: Int = 2

scala> x.div(y,z)
res5: Double = 5.0

scala> x.add(y,z)
res6: Int = 12

scala> x.sub(y,z)
res7: Int = 8

scala> x.mul(y,z)
res8: Int = 20
